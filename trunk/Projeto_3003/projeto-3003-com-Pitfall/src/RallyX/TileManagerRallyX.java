package RallyX;

import game.Keyboard;

import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.util.LinkedList;

public class TileManagerRallyX 
{
	int [][] tiles = new int[][]
	{
//			{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
//			{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
//			{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
//			{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
//			{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
//			{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
//			{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
//			{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},
//			{0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1}
			{9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,9},
			{9,22,22,22,22,22,22,22,22,22,16,15,15,15,15,15,17,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,9},
			{9,22,22,22,22,21,12,19,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,25,14,24,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,20,13,18,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9},
			{9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9}
	};
	
	int lines = 60;
	int cols = 40;
	
	int velocityMapMove;
	
	float sizeTile = 10;
	
	LinkedList<TileRallyX> tilesImg = new LinkedList<TileRallyX>();
	
	public TileManagerRallyX()
	{
		velocityMapMove = 5;
		
		for (int i = 0; i < lines; i++)
		{
			for (int j = 0; j < cols; j++)
			{
				if (tiles[i][j] == 0)
					tilesImg.add(new TileRallyX(j* 30, i*30, 30, 30, "/ImagesRallyX/carro_amarelo.png"));
				
				if (tiles[i][j] == 1)
					//tilesImg.add(new TileRallyX(j*30, i*30, 30, 30, "/ImagesRallyX/Parte_meio.png"));
				
				if (tiles[i][j] == 9)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/carro_amarelo.png"));
				
				if (tiles[i][j] == 12)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_meio-superor.png"));
				
				if (tiles[i][j] == 13)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_meio-inferior.png"));
				
				if (tiles[i][j] == 14)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_meio.png"));
				
				if (tiles[i][j] == 15)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_fina-meio.png"));
				
				if (tiles[i][j] == 16)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_fina-esquerda.png"));
				
				if (tiles[i][j] == 17)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_fina-direita.png"));
				
				if (tiles[i][j] == 18)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_direita-inferior.png"));
				
				if (tiles[i][j] == 19)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_direita-superor.png"));
				
				if (tiles[i][j] == 20)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_esquerda-inferior.png"));
				
				if (tiles[i][j] == 21)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_esquerda-superior.png"));
				
				if (tiles[i][j] == 22)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Parte_estrada.png"));
				
				if (tiles[i][j] == 23)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Bandeira.png"));
				
				if (tiles[i][j] == 24)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Textura24.png"));
				
				if (tiles[i][j] == 25)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Textura25.png"));
				
				if (tiles[i][j] == 26)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Textura26.png"));
				
				if (tiles[i][j] == 27)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Textura27.png"));
				
				if (tiles[i][j] == 28)
					tilesImg.add(new TileRallyX(j*sizeTile, i*sizeTile, (int)sizeTile, (int)sizeTile, "/ImagesRallyX/Textura28.png"));
			}
		}
	}
	
	public void update() 
	{
		if (Keyboard.getInstance().isKeyPressed(KeyEvent.VK_UP))
		{
			MoveMap(0);
		}
		
		if (Keyboard.getInstance().isKeyPressed(KeyEvent.VK_DOWN))
		{
			MoveMap(1);
		}
		
		if (Keyboard.getInstance().isKeyPressed(KeyEvent.VK_LEFT))
		{
			MoveMap(2);
		}
		
		if (Keyboard.getInstance().isKeyPressed(KeyEvent.VK_RIGHT))
		{
			MoveMap(3);
		}
	}
	
	public void Draw(Graphics2D g2d) 
	{
		for(TileRallyX obj : tilesImg)
		{
			obj.Draw(g2d);
		}
	}
	
	public void MoveMap(int direction)
	{
		switch (direction)
		{
		case 0:
			for(TileRallyX obj : tilesImg)
			{
				obj.y += velocityMapMove;
			}
			break;
		case 1:
			for(TileRallyX obj : tilesImg)
			{
				obj.y -= velocityMapMove;
			}
			break;
		case 2:
			for(TileRallyX obj : tilesImg)
			{
				obj.x += velocityMapMove;
			}
			break;
		case 3:
			for(TileRallyX obj : tilesImg)
			{
				obj.x -= velocityMapMove;
			}
			break;
		}
	}
}
